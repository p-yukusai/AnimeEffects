#ifndef EXPORTDIAG_H
#define EXPORTDIAG_H

// Created by Yukusai
/********************************************************************************
** Form generated by Qt Designer and then modified by hand
** Created by: Qt User Interface Compiler version 5.15.5
********************************************************************************/

#include <QtCore/QVariant>
#include <QtGui/QIcon>
#include <QtWidgets/QApplication>
#include <QtWidgets/QCheckBox>
#include <QtWidgets/QComboBox>
#include <QtWidgets/QFormLayout>
#include <QtWidgets/QFrame>
#include <QtWidgets/QGridLayout>
#include <QtWidgets/QHBoxLayout>
#include <QtWidgets/QLabel>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QPushButton>
#include <QtWidgets/QRadioButton>
#include <QtWidgets/QScrollArea>
#include <QtWidgets/QSpinBox>
#include <QtWidgets/QTabWidget>
#include <QtWidgets/QTextEdit>
#include <QtWidgets/QToolButton>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QWidget>
#include <QDir>
#include <QFileDialog>
#include <QPlainTextEdit>
#include <QDialogButtonBox>
#include <QDebug>
#include "util/SelectArgs.h"

QT_BEGIN_NAMESPACE

class ExportWidgetUI {
public:
    QVBoxLayout *verticalLayout_2;
    QVBoxLayout *tabVBox;
    QTabWidget *settingsTab;
    QWidget *globalParam;
    QVBoxLayout *verticalLayout_3;
    QScrollArea *globalParamScroll;
    QWidget *globalParamScrollContents;
    QGridLayout *gridLayout_2;
    QCheckBox *intermediateParamCheckBox;
    QRadioButton *keepAspectRatio;
    QLabel *lastFrameLabel;
    QLabel *exportTypeLabel;
    QLabel *intermediateTypeLabel;
    QRadioButton *customRatio;
    QPushButton *insertFrameRangeButton;
    QPushButton *removeFrameRangeButton;
    QFrame *exportLine1;
    QCheckBox *customPaletteCheckBox;
    QSpinBox *firstFrameSpinBox;
    QSpinBox *heightSpinBox;
    QCheckBox * forcePipeCheckBox;
    QComboBox *intermediateTypeCombo;
    QLabel *widthLabel;
    QRadioButton *oneToOneRatio;
    QPushButton *setWidthNative;
    QFrame *renderLine1;
    QFrame *exportLine2;
    QCheckBox *postParamCheckBox;
    QLabel *paramsLabel;
    QSpinBox *widthSpinBox;
    QLabel *heightLabel;
    QLabel *exportingLabel;
    QPushButton *setHeightNative;
    QPushButton *setFPSNative;
    QLabel *fpsLabel;
    QLabel *renderingLabel;
    QComboBox *exportTypeCombo;
    QCheckBox *transparencyCheckBox;
    QSpinBox *lastFrameSpinBox;
    QLineEdit *bitrateLineEdit;
    QPushButton *setBitrateAuto;
    QLabel *renderedFramesLabel;
    QFrame *renderLine2;
    QLabel *firstFrameLabel;
    QLabel *bitrateLabel;
    QLabel *imageQualityLabel;
    QSpinBox *imageQualitySpinbox;
    QPushButton *setImageQualityToAuto;
    QCheckBox *allowParamsCheckBox;
    QSpinBox * fpsSpinBox;
    QToolButton *selectPalettePathButton;
    QWidget *formatParam;
    QVBoxLayout *verticalLayout_4;
    QFormLayout *formatLayout;
    QScrollArea *formatParamScroll;
    QWidget *formatParamScrollContents;
    QGridLayout *gridLayout;
    QLabel *pixelFormatLabel;
    QLabel *movLabel;
    QComboBox *aviCombo;
    QLabel *mkvLabel;
    QComboBox *pixelFormatCombo;
    QComboBox *movCombo;
    QFrame *formatLine;
    QLabel *mp4Label;
    QLabel *aviLabel;
    QComboBox *webmCombo;
    QComboBox *mp4Combo;
    QLabel *webmLabel;
    QComboBox *mkvCombo;
    QWidget *customParam;
    QVBoxLayout *verticalLayout_5;
    QGridLayout *customParamLayout;
    QLabel *intermediateLabel;
    QLabel *postLabel;
    QFrame *customLine;
    QPushButton *addPresetToIntermediate;
    QPushButton * addPresetToPost;
    QLabel *presetLabel;
    QComboBox *presetCombo;
    QPushButton *removePreset;
    QTextEdit *postParamTextEdit;
    QToolButton *savePostParamAsPreset;
    QTextEdit *intermediateParamTextEdit;
    QToolButton *saveIntermediateParamAsPreset;
    QLabel *commandsLabel;
    QHBoxLayout *exportLayout;
    QPushButton *exportButton;
    QPushButton *cancelButton;
    QDir paletteDir;
    QVector<QSpinBox *>* initialFrames = new QVector<QSpinBox *>;
    QVector<QSpinBox *>* lastFrames = new QVector<QSpinBox *>;
    bool operationCancelled = true;
    bool mSizeUpdating = false;
    // Ask UI
    QGridLayout *gl;
    QGridLayout *gl_2;
    QScrollArea *scrollArea;
    QWidget *scrollWidget;
    QDialogButtonBox *yesNoBox;
    QSpacerItem *hS;
    QLabel *questionLabel;
    QSpacerItem *hS2;
    QPlainTextEdit *textEdit;
    bool askOperationCancelled = false;
    int latestHeight = 0;
    int latestWidth = 0;
    int nativeW;
    int nativeH;

    static QString tr(const QString& input){
        return QCoreApplication::translate("ExportDiag", input.toStdString().c_str());
    }

    void setupUi(QWidget *exportWidget, const QString& themePath, int projectLastFrame)
    {
        if (exportWidget->objectName().isEmpty())
            exportWidget->setObjectName(QString::fromUtf8("exportWidget"));
        exportWidget->resize(550, 700);
        QSizePolicy sizePolicy(QSizePolicy::MinimumExpanding, QSizePolicy::MinimumExpanding);
        sizePolicy.setHorizontalStretch(0);
        sizePolicy.setVerticalStretch(0);
        sizePolicy.setHeightForWidth(exportWidget->sizePolicy().hasHeightForWidth());
        exportWidget->setSizePolicy(sizePolicy);
        verticalLayout_2 = new QVBoxLayout(exportWidget);
        verticalLayout_2->setObjectName(QString::fromUtf8("verticalLayout_2"));
        tabVBox = new QVBoxLayout();
        tabVBox->setSpacing(7);
        tabVBox->setObjectName(QString::fromUtf8("tabVBox"));
        settingsTab = new QTabWidget(exportWidget);
        settingsTab->setObjectName(QString::fromUtf8("settingsTab"));
        settingsTab->setTabShape(QTabWidget::Rounded);
        globalParam = new QWidget();
        globalParam->setObjectName(QString::fromUtf8("globalParam"));
        verticalLayout_3 = new QVBoxLayout(globalParam);
        verticalLayout_3->setObjectName(QString::fromUtf8("verticalLayout_3"));
        globalParamScroll = new QScrollArea(globalParam);
        globalParamScroll->setObjectName(QString::fromUtf8("globalParamScroll"));
        globalParamScroll->setWidgetResizable(true);
        globalParamScrollContents = new QWidget();
        globalParamScrollContents->setObjectName(QString::fromUtf8("globalParamScrollContents"));
        globalParamScrollContents->setGeometry(QRect(0, 0, 471, 567));
        gridLayout_2 = new QGridLayout(globalParamScrollContents);
        gridLayout_2->setObjectName(QString::fromUtf8("gridLayout_2"));
        intermediateParamCheckBox = new QCheckBox(globalParamScrollContents);
        intermediateParamCheckBox->setObjectName(QString::fromUtf8("intermediateParamCheckBox"));
        intermediateParamCheckBox->setChecked(true);
        intermediateParamCheckBox->setAutoExclusive(false);

        gridLayout_2->addWidget(intermediateParamCheckBox, 18, 1, 1, 1);

        keepAspectRatio = new QRadioButton(globalParamScrollContents);
        keepAspectRatio->setObjectName(QString::fromUtf8("keepAspectRatio"));
        keepAspectRatio->setChecked(true);

        gridLayout_2->addWidget(keepAspectRatio, 5, 1, 1, 1);

        lastFrameLabel = new QLabel(globalParamScrollContents);
        lastFrameLabel->setObjectName(QString::fromUtf8("lastFrameLabel"));
        QSizePolicy sizePolicy1(QSizePolicy::MinimumExpanding, QSizePolicy::Preferred);
        sizePolicy1.setHorizontalStretch(0);
        sizePolicy1.setVerticalStretch(0);
        sizePolicy1.setHeightForWidth(lastFrameLabel->sizePolicy().hasHeightForWidth());
        lastFrameLabel->setSizePolicy(sizePolicy1);

        gridLayout_2->addWidget(lastFrameLabel, 22, 2, 1, 1);

        exportTypeLabel = new QLabel(globalParamScrollContents);
        exportTypeLabel->setObjectName(QString::fromUtf8("exportTypeLabel"));

        gridLayout_2->addWidget(exportTypeLabel, 9, 0, 1, 1);

        intermediateTypeLabel = new QLabel(globalParamScrollContents);
        intermediateTypeLabel->setObjectName(QString::fromUtf8("intermediateTypeLabel"));

        gridLayout_2->addWidget(intermediateTypeLabel, 13, 0, 1, 1);

        customRatio = new QRadioButton(globalParamScrollContents);
        customRatio->setObjectName(QString::fromUtf8("customRatio"));

        gridLayout_2->addWidget(customRatio, 5, 2, 1, 1);

        insertFrameRangeButton = new QPushButton(globalParamScrollContents);
        insertFrameRangeButton->setObjectName(QString::fromUtf8("insertFrameRangeButton"));
        QSizePolicy sizePolicy2(QSizePolicy::Expanding, QSizePolicy::Fixed);
        sizePolicy2.setHorizontalStretch(0);
        sizePolicy2.setVerticalStretch(0);
        sizePolicy2.setHeightForWidth(insertFrameRangeButton->sizePolicy().hasHeightForWidth());
        insertFrameRangeButton->setSizePolicy(sizePolicy2);
        QIcon icon;
        icon.addFile(QString(themePath + "/icon/knockkey.png"), QSize(), QIcon::Normal, QIcon::Off);
        insertFrameRangeButton->setIcon(icon);

        gridLayout_2->addWidget(insertFrameRangeButton, 23, 0, 1, 1);

        QWidget::connect(insertFrameRangeButton, &QPushButton::clicked, [=]{addRange(projectLastFrame);});

        removeFrameRangeButton = new QPushButton(globalParamScrollContents);
        removeFrameRangeButton->setObjectName(QString::fromUtf8("removeFrameRangeButton"));
        removeFrameRangeButton->setSizePolicy(sizePolicy2);
        QIcon rfIcon;
        rfIcon.addFile(QString(themePath + "/icon/minus.png"), QSize(), QIcon::Normal, QIcon::Off);
        removeFrameRangeButton->setIcon(rfIcon);

        gridLayout_2->addWidget(removeFrameRangeButton, 24, 0, 1, 1);

        QWidget::connect(removeFrameRangeButton, &QPushButton::clicked, [=]{removeRange(projectLastFrame);});

        exportLine1 = new QFrame(globalParamScrollContents);
        exportLine1->setObjectName(QString::fromUtf8("exportLine1"));
        exportLine1->setFrameShape(QFrame::HLine);
        exportLine1->setFrameShadow(QFrame::Sunken);

        gridLayout_2->addWidget(exportLine1, 8, 0, 1, 1);

        customPaletteCheckBox = new QCheckBox(globalParamScrollContents);
        customPaletteCheckBox->setObjectName(QString::fromUtf8("customPaletteCheckBox"));
        customPaletteCheckBox->setChecked(false);

        gridLayout_2->addWidget(customPaletteCheckBox, 19, 0, 1, 1);

        firstFrameSpinBox = new QSpinBox(globalParamScrollContents);
        firstFrameSpinBox->setObjectName(QString::fromUtf8("firstFrameSpinBox"));
        firstFrameSpinBox->setMaximum(INT32_MAX);
        firstFrameSpinBox->setMinimum(0);
        QSizePolicy sizePolicy3(QSizePolicy::MinimumExpanding, QSizePolicy::Fixed);
        sizePolicy3.setHorizontalStretch(0);
        sizePolicy3.setVerticalStretch(0);
        sizePolicy3.setHeightForWidth(firstFrameSpinBox->sizePolicy().hasHeightForWidth());
        firstFrameSpinBox->setSizePolicy(sizePolicy3);

        gridLayout_2->addWidget(firstFrameSpinBox, 23, 1, 1, 1);

        initialFrames->append(firstFrameSpinBox);

        heightSpinBox = new QSpinBox(globalParamScrollContents);
        heightSpinBox->setObjectName(QString::fromUtf8("heightSpinBox"));
        heightSpinBox->setMaximum(INT32_MAX);
        heightSpinBox->setMinimum(0);

        gridLayout_2->addWidget(heightSpinBox, 4, 1, 1, 1);

        forcePipeCheckBox = new QCheckBox(globalParamScrollContents);
        forcePipeCheckBox->setObjectName(QString::fromUtf8("forcePipeCheckBox"));

        gridLayout_2->addWidget(forcePipeCheckBox, 15, 0, 1, 2);

        intermediateTypeCombo = new QComboBox(globalParamScrollContents);
        intermediateTypeCombo->addItem(QString());
        intermediateTypeCombo->addItem(QString());
        intermediateTypeCombo->addItem(QString());
        intermediateTypeCombo->addItem(QString());
        intermediateTypeCombo->addItem(QString());
        intermediateTypeCombo->setObjectName(QString::fromUtf8("intermediateTypeCombo"));

        intermediateTypeCombo->setCurrentIndex(4);

        gridLayout_2->addWidget(intermediateTypeCombo, 13, 1, 1, 2);

        widthLabel = new QLabel(globalParamScrollContents);
        widthLabel->setObjectName(QString::fromUtf8("widthLabel"));
        QSizePolicy sizePolicy4(QSizePolicy::Expanding, QSizePolicy::Preferred);
        sizePolicy4.setHorizontalStretch(0);
        sizePolicy4.setVerticalStretch(0);
        sizePolicy4.setHeightForWidth(widthLabel->sizePolicy().hasHeightForWidth());
        widthLabel->setSizePolicy(sizePolicy4);

        gridLayout_2->addWidget(widthLabel, 3, 0, 1, 1);

        oneToOneRatio = new QRadioButton(globalParamScrollContents);
        oneToOneRatio->setObjectName(QString::fromUtf8("oneToOneRatio"));
        oneToOneRatio->setChecked(false);

        gridLayout_2->addWidget(oneToOneRatio, 5, 0, 1, 1);

        setWidthNative = new QPushButton(globalParamScrollContents);
        setWidthNative->setObjectName(QString::fromUtf8("setWidthNative"));
        QIcon icon1;
        icon1.addFile(QString(themePath + "/icon/rotatecw.png"), QSize(), QIcon::Normal, QIcon::Off);
        setWidthNative->setIcon(icon1);

        gridLayout_2->addWidget(setWidthNative, 3, 2, 1, 1);

        renderLine1 = new QFrame(globalParamScrollContents);
        renderLine1->setObjectName(QString::fromUtf8("renderLine1"));
        sizePolicy3.setHeightForWidth(renderLine1->sizePolicy().hasHeightForWidth());
        renderLine1->setSizePolicy(sizePolicy3);
        renderLine1->setFrameShape(QFrame::HLine);
        renderLine1->setFrameShadow(QFrame::Sunken);

        gridLayout_2->addWidget(renderLine1, 2, 0, 1, 1);

        exportLine2 = new QFrame(globalParamScrollContents);
        exportLine2->setObjectName(QString::fromUtf8("exportLine2"));
        exportLine2->setFrameShape(QFrame::HLine);
        exportLine2->setFrameShadow(QFrame::Sunken);

        gridLayout_2->addWidget(exportLine2, 8, 2, 1, 1);

        postParamCheckBox = new QCheckBox(globalParamScrollContents);
        postParamCheckBox->setObjectName(QString::fromUtf8("postParamCheckBox"));
        postParamCheckBox->setChecked(true);
        postParamCheckBox->setAutoExclusive(false);

        gridLayout_2->addWidget(postParamCheckBox, 18, 2, 1, 1);

        paramsLabel = new QLabel(globalParamScrollContents);
        paramsLabel->setObjectName(QString::fromUtf8("paramsLabel"));

        gridLayout_2->addWidget(paramsLabel, 18, 0, 1, 1);

        widthSpinBox = new QSpinBox(globalParamScrollContents);
        widthSpinBox->setObjectName(QString::fromUtf8("widthSpinBox"));
        QSizePolicy sizePolicy5(QSizePolicy::Preferred, QSizePolicy::Fixed);
        sizePolicy5.setHorizontalStretch(0);
        sizePolicy5.setVerticalStretch(0);
        sizePolicy5.setHeightForWidth(widthSpinBox->sizePolicy().hasHeightForWidth());
        widthSpinBox->setSizePolicy(sizePolicy5);
        widthSpinBox->setMaximum(INT32_MAX);
        widthSpinBox->setMinimum(0);

        gridLayout_2->addWidget(widthSpinBox, 3, 1, 1, 1);

        heightLabel = new QLabel(globalParamScrollContents);
        heightLabel->setObjectName(QString::fromUtf8("heightLabel"));
        sizePolicy4.setHeightForWidth(heightLabel->sizePolicy().hasHeightForWidth());
        heightLabel->setSizePolicy(sizePolicy4);

        gridLayout_2->addWidget(heightLabel, 4, 0, 1, 1);

        exportingLabel = new QLabel(globalParamScrollContents);
        exportingLabel->setObjectName(QString::fromUtf8("exportingLabel"));
        QSizePolicy sizePolicy6(QSizePolicy::Minimum, QSizePolicy::Maximum);
        sizePolicy6.setHorizontalStretch(0);
        sizePolicy6.setVerticalStretch(0);
        sizePolicy6.setHeightForWidth(exportingLabel->sizePolicy().hasHeightForWidth());
        exportingLabel->setSizePolicy(sizePolicy6);

        gridLayout_2->addWidget(exportingLabel, 8, 1, 1, 1);

        setHeightNative = new QPushButton(globalParamScrollContents);
        setHeightNative->setObjectName(QString::fromUtf8("setHeightNative"));
        setHeightNative->setIcon(icon1);

        gridLayout_2->addWidget(setHeightNative, 4, 2, 1, 1);

        fpsLabel = new QLabel(globalParamScrollContents);
        fpsLabel->setObjectName(QString::fromUtf8("fpsLabel"));

        gridLayout_2->addWidget(fpsLabel, 10, 0, 1, 1);

        renderingLabel = new QLabel(globalParamScrollContents);
        renderingLabel->setObjectName(QString::fromUtf8("renderingLabel"));
        QSizePolicy sizePolicy7(QSizePolicy::Preferred, QSizePolicy::Maximum);
        sizePolicy7.setHorizontalStretch(0);
        sizePolicy7.setVerticalStretch(0);
        sizePolicy7.setHeightForWidth(renderingLabel->sizePolicy().hasHeightForWidth());
        renderingLabel->setSizePolicy(sizePolicy7);

        gridLayout_2->addWidget(renderingLabel, 2, 1, 1, 1);

        exportTypeCombo = new QComboBox(globalParamScrollContents);
        QIcon icon2;
        icon2.addFile(QString(themePath +"/icon/animation.png"), QSize(), QIcon::Normal, QIcon::Off);
        exportTypeCombo->addItem(icon2, QString());
        QIcon icon3;
        icon3.addFile(QString(themePath + "/icon/cutimages.png"), QSize(), QIcon::Normal, QIcon::Off);
        exportTypeCombo->addItem(icon3, QString());
        exportTypeCombo->setObjectName(QString::fromUtf8("exportTypeCombo"));

        gridLayout_2->addWidget(exportTypeCombo, 9, 1, 1, 2);

        transparencyCheckBox = new QCheckBox(globalParamScrollContents);
        transparencyCheckBox->setObjectName(QString::fromUtf8("transparencyCheckBox"));
        transparencyCheckBox->setChecked(true);

        gridLayout_2->addWidget(transparencyCheckBox, 14, 0, 1, 2);

        lastFrameSpinBox = new QSpinBox(globalParamScrollContents);
        lastFrameSpinBox->setObjectName(QString::fromUtf8("lastFrameSpinBox"));
        lastFrameSpinBox->setMaximum(INT32_MAX);
        lastFrameSpinBox->setMinimum(0);
        sizePolicy3.setHeightForWidth(lastFrameSpinBox->sizePolicy().hasHeightForWidth());
        lastFrameSpinBox->setSizePolicy(sizePolicy3);

        gridLayout_2->addWidget(lastFrameSpinBox, 23, 2, 1, 1);

        lastFrames->append(lastFrameSpinBox);

        bitrateLineEdit = new QLineEdit(globalParamScrollContents);
        bitrateLineEdit->setObjectName(QString::fromUtf8("bitrateLineEdit"));

        imageQualitySpinbox = new QSpinBox(globalParamScrollContents);
        imageQualitySpinbox->setObjectName(QString::fromUtf8("imageQualityEdit"));
        imageQualitySpinbox->setRange(-1, 100);
        imageQualitySpinbox->setValue(-1);

        gridLayout_2->addWidget(bitrateLineEdit, 11, 1, 1, 1);
        gridLayout_2->addWidget(imageQualitySpinbox, 12, 1, 1, 1);

        setBitrateAuto = new QPushButton(globalParamScrollContents);
        setBitrateAuto->setObjectName(QString::fromUtf8("setBitrateAuto"));

        setImageQualityToAuto = new QPushButton(globalParamScrollContents);
        setImageQualityToAuto->setObjectName(QString::fromUtf8("setImageQualityToAuto"));

        setImageQualityToAuto->setIcon(icon1);
        setBitrateAuto->setIcon(icon1);
        gridLayout_2->addWidget(setBitrateAuto, 11, 2, 1, 1);
        gridLayout_2->addWidget(setImageQualityToAuto, 12, 2, 1, 1);

        QWidget::connect(setBitrateAuto, &QPushButton::clicked,
                         [=]{bitrateLineEdit->setText("Auto");});
        QWidget::connect(setImageQualityToAuto, &QPushButton::clicked,
            [=]{imageQualitySpinbox->setValue(-1);});

        renderedFramesLabel = new QLabel(globalParamScrollContents);
        renderedFramesLabel->setObjectName(QString::fromUtf8("renderedFramesLabel"));
        sizePolicy7.setHeightForWidth(renderedFramesLabel->sizePolicy().hasHeightForWidth());
        renderedFramesLabel->setSizePolicy(sizePolicy7);

        gridLayout_2->addWidget(renderedFramesLabel, 22, 0, 1, 1);

        renderLine2 = new QFrame(globalParamScrollContents);
        renderLine2->setObjectName(QString::fromUtf8("renderLine2"));
        sizePolicy3.setHeightForWidth(renderLine2->sizePolicy().hasHeightForWidth());
        renderLine2->setSizePolicy(sizePolicy3);
        renderLine2->setFrameShape(QFrame::HLine);
        renderLine2->setFrameShadow(QFrame::Sunken);

        gridLayout_2->addWidget(renderLine2, 2, 2, 1, 1);

        firstFrameLabel = new QLabel(globalParamScrollContents);
        firstFrameLabel->setObjectName(QString::fromUtf8("firstFrameLabel"));
        sizePolicy1.setHeightForWidth(firstFrameLabel->sizePolicy().hasHeightForWidth());
        firstFrameLabel->setSizePolicy(sizePolicy1);

        gridLayout_2->addWidget(firstFrameLabel, 22, 1, 1, 1);

        bitrateLabel = new QLabel(globalParamScrollContents);
        bitrateLabel->setObjectName(QString::fromUtf8("bitrateLabel"));

        gridLayout_2->addWidget(bitrateLabel, 11, 0, 1, 1);

        imageQualityLabel = new QLabel(globalParamScrollContents);
        imageQualityLabel->setObjectName(QString::fromUtf8("imageQualityLabel"));

        gridLayout_2->addWidget(imageQualityLabel, 12, 0, 1, 1);

        allowParamsCheckBox = new QCheckBox(globalParamScrollContents);
        allowParamsCheckBox->setObjectName(QString::fromUtf8("allowParamsCheckBox"));
        allowParamsCheckBox->setChecked(true);

        gridLayout_2->addWidget(allowParamsCheckBox, 17, 0, 1, 3);

        fpsSpinBox = new QSpinBox(globalParamScrollContents);
        fpsSpinBox->setObjectName(QString::fromUtf8("fpsSpinBox"));
        // Go nuts I guess
        fpsSpinBox->setMinimum(1);
        fpsSpinBox->setMaximum(INT32_MAX);

        gridLayout_2->addWidget(fpsSpinBox, 10, 1, 1, 1);

        setFPSNative = new QPushButton(globalParamScrollContents);
        setFPSNative->setObjectName(QString::fromUtf8("setFPSNative"));
        setFPSNative->setIcon(icon1);

        gridLayout_2->addWidget(setFPSNative, 10, 2, 1, 1);


        selectPalettePathButton = new QToolButton(globalParamScrollContents);
        selectPalettePathButton->setObjectName(QString::fromUtf8("selectPalettePathButton"));
        sizePolicy2.setHeightForWidth(selectPalettePathButton->sizePolicy().hasHeightForWidth());
        selectPalettePathButton->setSizePolicy(sizePolicy2);

        gridLayout_2->addWidget(selectPalettePathButton, 19, 1, 1, 2);

        QWidget::connect(selectPalettePathButton, &QPushButton::clicked, [=]()mutable
                         {
                             paletteDir = QDir(
                                 QFileDialog::getOpenFileName(exportWidget, tr("Open Palette"),
                                                              nullptr, tr("FFmpeg palette file (*.png)"))
                                 );
                             QString lbl = QFileInfo(paletteDir.absolutePath()).fileName();
                             selectPalettePathButton->setText(lbl);
                         });

        globalParamScroll->setWidget(globalParamScrollContents);

        verticalLayout_3->addWidget(globalParamScroll);

        settingsTab->addTab(globalParam, QString());
        formatParam = new QWidget();
        formatParam->setObjectName(QString::fromUtf8("formatParam"));
        verticalLayout_4 = new QVBoxLayout(formatParam);
        verticalLayout_4->setObjectName(QString::fromUtf8("verticalLayout_4"));
        formatLayout = new QFormLayout();
        formatLayout->setObjectName(QString::fromUtf8("formatLayout"));
        formatParamScroll = new QScrollArea(formatParam);
        formatParamScroll->setObjectName(QString::fromUtf8("formatParamScroll"));
        formatParamScroll->setWidgetResizable(true);
        formatParamScrollContents = new QWidget();
        formatParamScrollContents->setObjectName(QString::fromUtf8("formatParamScrollContents"));
        formatParamScrollContents->setGeometry(QRect(0, 0, 189, 199));
        gridLayout = new QGridLayout(formatParamScrollContents);
        gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
        pixelFormatLabel = new QLabel(formatParamScrollContents);
        pixelFormatLabel->setObjectName(QString::fromUtf8("pixelFormatLabel"));

        gridLayout->addWidget(pixelFormatLabel, 0, 0, 1, 1);

        movLabel = new QLabel(formatParamScrollContents);
        movLabel->setObjectName(QString::fromUtf8("movLabel"));

        gridLayout->addWidget(movLabel, 4, 0, 1, 1);

        aviCombo = new QComboBox(formatParamScrollContents);
        aviCombo->addItem(QString());
        aviCombo->addItem(QString());
        aviCombo->addItem(QString());
        aviCombo->setObjectName(QString::fromUtf8("aviCombo"));

        gridLayout->addWidget(aviCombo, 2, 1, 1, 2);

        mkvLabel = new QLabel(formatParamScrollContents);
        mkvLabel->setObjectName(QString::fromUtf8("mkvLabel"));

        gridLayout->addWidget(mkvLabel, 3, 0, 1, 1);

        pixelFormatCombo = new QComboBox(formatParamScrollContents);
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->addItem(QString());
        pixelFormatCombo->setObjectName(QString::fromUtf8("pixelFormatCombo"));

        gridLayout->addWidget(pixelFormatCombo, 0, 1, 1, 2);

        movCombo = new QComboBox(formatParamScrollContents);
        movCombo->addItem(QString());
        movCombo->addItem(QString());
        movCombo->addItem(QString());
        movCombo->addItem(QString());
        movCombo->addItem(QString());
        movCombo->setObjectName(QString::fromUtf8("movCombo"));

        gridLayout->addWidget(movCombo, 4, 1, 1, 2);

        formatLine = new QFrame(formatParamScrollContents);
        formatLine->setObjectName(QString::fromUtf8("formatLine"));
        formatLine->setFrameShape(QFrame::HLine);
        formatLine->setFrameShadow(QFrame::Sunken);

        gridLayout->addWidget(formatLine, 1, 0, 1, 3);

        mp4Label = new QLabel(formatParamScrollContents);
        mp4Label->setObjectName(QString::fromUtf8("mp4Label"));

        gridLayout->addWidget(mp4Label, 5, 0, 1, 1);

        aviLabel = new QLabel(formatParamScrollContents);
        aviLabel->setObjectName(QString::fromUtf8("aviLabel"));
        sizePolicy7.setHeightForWidth(aviLabel->sizePolicy().hasHeightForWidth());
        aviLabel->setSizePolicy(sizePolicy7);

        gridLayout->addWidget(aviLabel, 2, 0, 1, 1);

        webmCombo = new QComboBox(formatParamScrollContents);
        webmCombo->addItem(QString());
        webmCombo->addItem(QString());
        webmCombo->addItem(QString());
        webmCombo->setObjectName(QString::fromUtf8("webmCombo"));

        gridLayout->addWidget(webmCombo, 7, 1, 1, 2);

        mp4Combo = new QComboBox(formatParamScrollContents);
        mp4Combo->addItem(QString());
        mp4Combo->addItem(QString());
        mp4Combo->addItem(QString());
        mp4Combo->setObjectName(QString::fromUtf8("mp4Combo"));

        gridLayout->addWidget(mp4Combo, 5, 1, 1, 2);

        webmLabel = new QLabel(formatParamScrollContents);
        webmLabel->setObjectName(QString::fromUtf8("webmLabel"));

        gridLayout->addWidget(webmLabel, 7, 0, 1, 1);

        mkvCombo = new QComboBox(formatParamScrollContents);
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->addItem(QString());
        mkvCombo->setObjectName(QString::fromUtf8("mkvCombo"));

        gridLayout->addWidget(mkvCombo, 3, 1, 1, 2);

        formatParamScroll->setWidget(formatParamScrollContents);

        formatLayout->setWidget(0, QFormLayout::SpanningRole, formatParamScroll);


        verticalLayout_4->addLayout(formatLayout);

        settingsTab->addTab(formatParam, QString());
        customParam = new QWidget();
        customParam->setObjectName(QString::fromUtf8("customParam"));
        verticalLayout_5 = new QVBoxLayout(customParam);
        verticalLayout_5->setObjectName(QString::fromUtf8("verticalLayout_5"));
        customParamLayout = new QGridLayout();
        customParamLayout->setObjectName(QString::fromUtf8("customParamLayout"));
        intermediateLabel = new QLabel(customParam);
        intermediateLabel->setObjectName(QString::fromUtf8("intermediateLabel"));
        QSizePolicy sizePolicy8(QSizePolicy::Maximum, QSizePolicy::Preferred);
        sizePolicy8.setHorizontalStretch(0);
        sizePolicy8.setVerticalStretch(0);
        sizePolicy8.setHeightForWidth(intermediateLabel->sizePolicy().hasHeightForWidth());
        intermediateLabel->setSizePolicy(sizePolicy8);
        intermediateLabel->setWordWrap(true);

        customParamLayout->addWidget(intermediateLabel, 1, 0, 1, 1);

        postLabel = new QLabel(customParam);
        postLabel->setObjectName(QString::fromUtf8("postLabel"));

        customParamLayout->addWidget(postLabel, 3, 0, 1, 1);

        customLine = new QFrame(customParam);
        customLine->setObjectName(QString::fromUtf8("customLine"));
        customLine->setFrameShape(QFrame::HLine);
        customLine->setFrameShadow(QFrame::Sunken);

        customParamLayout->addWidget(customLine, 5, 0, 1, 3);

        addPresetToIntermediate = new QPushButton(customParam);
        addPresetToIntermediate->setObjectName(QString::fromUtf8("addPresetToIntermediate"));

        customParamLayout->addWidget(addPresetToIntermediate, 7, 1, 1, 1);

        addPresetToPost = new QPushButton(customParam);
        addPresetToPost->setObjectName(QString::fromUtf8("addPresetToPost"));

        customParamLayout->addWidget(addPresetToPost, 7, 2, 1, 1);

        presetLabel = new QLabel(customParam);
        presetLabel->setObjectName(QString::fromUtf8("presetLabel"));

        customParamLayout->addWidget(presetLabel, 6, 0, 1, 1);

        presetCombo = new QComboBox(customParam);
        presetCombo->setObjectName(QString::fromUtf8("presetCombo"));

        customParamLayout->addWidget(presetCombo, 6, 1, 1, 3);

        removePreset = new QPushButton(customParam);
        removePreset->setObjectName(QString::fromUtf8("removePreset"));

        customParamLayout->addWidget(removePreset, 7, 3, 1, 1);

        postParamTextEdit = new QTextEdit(customParam);
        postParamTextEdit->setObjectName(QString::fromUtf8("postParamTextEdit"));
        QSizePolicy sizePolicy9(QSizePolicy::MinimumExpanding, QSizePolicy::Expanding);
        sizePolicy9.setHorizontalStretch(0);
        sizePolicy9.setVerticalStretch(0);
        sizePolicy9.setHeightForWidth(postParamTextEdit->sizePolicy().hasHeightForWidth());
        postParamTextEdit->setSizePolicy(sizePolicy9);

        customParamLayout->addWidget(postParamTextEdit, 3, 1, 1, 3);

        savePostParamAsPreset = new QToolButton(customParam);
        savePostParamAsPreset->setObjectName(QString::fromUtf8("savePostParamAsPreset"));
        sizePolicy3.setHeightForWidth(savePostParamAsPreset->sizePolicy().hasHeightForWidth());
        savePostParamAsPreset->setSizePolicy(sizePolicy3);

        customParamLayout->addWidget(savePostParamAsPreset, 4, 1, 1, 3);

        intermediateParamTextEdit = new QTextEdit(customParam);
        intermediateParamTextEdit->setObjectName(QString::fromUtf8("intermediateParamTextEdit"));

        customParamLayout->addWidget(intermediateParamTextEdit, 1, 1, 1, 3);

        saveIntermediateParamAsPreset = new QToolButton(customParam);
        saveIntermediateParamAsPreset->setObjectName(QString::fromUtf8("saveIntermediateParamAsPreset"));
        sizePolicy3.setHeightForWidth(saveIntermediateParamAsPreset->sizePolicy().hasHeightForWidth());
        saveIntermediateParamAsPreset->setSizePolicy(sizePolicy3);

        customParamLayout->addWidget(saveIntermediateParamAsPreset, 2, 1, 1, 3);

        commandsLabel = new QLabel(customParam);
        commandsLabel->setObjectName(QString::fromUtf8("commandsLabel"));

        customParamLayout->addWidget(commandsLabel, 0, 0, 1, 4);


        verticalLayout_5->addLayout(customParamLayout);

        settingsTab->addTab(customParam, QString());

        tabVBox->addWidget(settingsTab);


        verticalLayout_2->addLayout(tabVBox);

        exportLayout = new QHBoxLayout();
        exportLayout->setObjectName(QString::fromUtf8("exportLayout"));
        exportButton = new QPushButton(exportWidget);
        exportButton->setObjectName(QString::fromUtf8("exportButton"));

        exportLayout->addWidget(exportButton);

        cancelButton = new QPushButton(exportWidget);
        cancelButton->setObjectName(QString::fromUtf8("cancelButton"));

        exportLayout->addWidget(cancelButton);


        verticalLayout_2->addLayout(exportLayout);


        retranslateUi(exportWidget);

        // For some reason QSpinBox does not keep a delta of the changes,
        // so we have to do it ourselves via scuffed implementation

        QWidget::connect(widthSpinBox, util::SelectArgs<int>::from(&QSpinBox::valueChanged), [=](int aValue){
            if (mSizeUpdating) { return; }
            if (latestWidth == 0){
                latestWidth = aValue;
                return;
            }
            mSizeUpdating = true;
            if(oneToOneRatio->isChecked()){
                heightSpinBox->setValue(heightSpinBox->value() + (aValue - latestWidth));
            }
            else if(keepAspectRatio->isChecked()) {
                heightSpinBox->setValue((nativeH * aValue) / nativeW);
            }
            latestWidth = aValue;
            latestHeight = heightSpinBox->value();
            mSizeUpdating = false;
        });
        QWidget::connect(heightSpinBox,  util::SelectArgs<int>::from(&QSpinBox::valueChanged), [=](int aValue){
            if (mSizeUpdating) { return; }
            if (latestHeight == 0){
                latestHeight = aValue;
                return;
            }
            mSizeUpdating = true;
            if(oneToOneRatio->isChecked()){
                widthSpinBox->setValue(widthSpinBox->value() + (aValue - latestHeight));
            }
            else if(keepAspectRatio->isChecked()) {
                widthSpinBox->setValue((nativeW * aValue) / nativeH);
            }
            latestHeight = aValue;
            latestWidth = widthSpinBox->value();
            mSizeUpdating = false;
        });

        settingsTab->setCurrentIndex(0);


        QMetaObject::connectSlotsByName(exportWidget);
    } // setupUi
    struct Pos { int row = -1, col = -1; };

    void addRange(int lastFrame) const{
        qDebug("Adding range");
        auto* newFirstRange = new QSpinBox;
        auto* newLastRange = new QSpinBox;
        newFirstRange->setMaximum(INT32_MAX);
        newFirstRange->setMinimum(0);
        newLastRange->setMaximum(INT32_MAX);
        newLastRange->setMinimum(0);
        int FRIndex = gridLayout_2->indexOf(initialFrames->last());
        int LRIndex = gridLayout_2->indexOf(lastFrames->last());
        int unused;
        Pos frPos;
        Pos lrPos;
        gridLayout_2->getItemPosition(FRIndex, &frPos.row, &frPos.col, &unused, &unused);
        gridLayout_2->getItemPosition(LRIndex, &lrPos.row, &lrPos.col, &unused, &unused);
        frPos.row++;
        lrPos.row++;
        newFirstRange->setValue(lastFrames->last()->value());
        newLastRange->setValue(lastFrame);
        gridLayout_2->addWidget(newFirstRange, frPos.row, frPos.col);
        initialFrames->append(newFirstRange);
        gridLayout_2->addWidget(newLastRange, lrPos.row, lrPos.col);
        lastFrames->append(newLastRange);
    }

    void removeRange(int lastFrame) const{
        qDebug("Removing range");
        // No crashing the app please
        if(initialFrames->empty()){ addRange(lastFrame); return; }
        if(initialFrames->size() == 1){ return; }
        gridLayout_2->removeWidget(initialFrames->last());
        gridLayout_2->removeWidget(lastFrames->last());
        initialFrames->last()->deleteLater();
        lastFrames->last()->deleteLater();
        initialFrames->removeLast();
        lastFrames->removeLast();
    }

    void retranslateUi(QWidget *exportWidget) const
    {
        // Disable all Custom Argument stuff for the time being as I'm too tired to deal with it now
        allowParamsCheckBox->setDisabled(true);
        postParamCheckBox->setDisabled(true);
        intermediateParamCheckBox->setDisabled(true);
        customParam->setDisabled(true);
        // ------------------------------------------------------------------------------------------
        exportWidget->setWindowTitle(QCoreApplication::translate("exportWidget", "Export parameters", nullptr));
        intermediateParamCheckBox->setText(QCoreApplication::translate("exportWidget", "Intermediate ", nullptr));
        keepAspectRatio->setText(QCoreApplication::translate("exportWidget", "Keep aspect ratio", nullptr));
        lastFrameLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">- Last frame -</p></body></html>", nullptr));
        exportTypeLabel->setText(QCoreApplication::translate("exportWidget", "Export type:", nullptr));
        intermediateTypeLabel->setText(QCoreApplication::translate("exportWidget", "Intermediate type:", nullptr));
        customRatio->setText(QCoreApplication::translate("exportWidget", "Custom", nullptr));
        insertFrameRangeButton->setText(QCoreApplication::translate("exportWidget", "Insert range", nullptr));
        removeFrameRangeButton->setText(QCoreApplication::translate("exportWidget", "Remove range", nullptr));
        customPaletteCheckBox->setText(QCoreApplication::translate("exportWidget", "Custom palette", nullptr));
        forcePipeCheckBox->setText(QCoreApplication::translate("exportWidget", "Force piped export ", nullptr));
        intermediateTypeCombo->setItemText(0, QCoreApplication::translate("exportWidget", "PNG", nullptr));
        intermediateTypeCombo->setItemText(1, QCoreApplication::translate("exportWidget", "BMP", nullptr));
        intermediateTypeCombo->setItemText(2, QCoreApplication::translate("exportWidget", "JPG", nullptr));
        intermediateTypeCombo->setItemText(3, QCoreApplication::translate("exportWidget", "JPEG", nullptr));
        intermediateTypeCombo->setItemText(4, QCoreApplication::translate("exportWidget", "PPM", nullptr));
        widthLabel->setText(QCoreApplication::translate("exportWidget", "Width: ", nullptr));
        oneToOneRatio->setText(QCoreApplication::translate("exportWidget", "One-to-one", nullptr));
        setWidthNative->setText(QCoreApplication::translate("exportWidget", "Set to native", nullptr));
        postParamCheckBox->setText(QCoreApplication::translate("exportWidget", "Post", nullptr));
        paramsLabel->setText(QCoreApplication::translate("exportWidget", "Active parameters:", nullptr));
        heightLabel->setText(QCoreApplication::translate("exportWidget", "Height:", nullptr));
        exportingLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Exporting</p></body></html>", nullptr));
        setHeightNative->setText(QCoreApplication::translate("exportWidget", "Set to native", nullptr));
        fpsLabel->setText(QCoreApplication::translate("exportWidget", "FPS:", nullptr));
        renderingLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Rendering</p></body></html>", nullptr));
        exportTypeCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Animation", nullptr));
        exportTypeCombo->setItemText(1, QCoreApplication::translate("exportWidget", "Image sequence", nullptr));
        setFPSNative->setText(QCoreApplication::translate("exportWidget", "Set to native", nullptr));
        transparencyCheckBox->setText(QCoreApplication::translate("exportWidget", "Export with transparency", nullptr));
        bitrateLineEdit->setPlaceholderText(QCoreApplication::translate("exportWidget", "Auto", nullptr));
        setBitrateAuto->setText(QCoreApplication::translate("exportWidget", "Set to auto", nullptr));
        renderedFramesLabel->setText(QCoreApplication::translate("exportWidget", "Frames rendered: ", nullptr));
        firstFrameLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">- First frame -</p></body></html>", nullptr));
        bitrateLabel->setText(QCoreApplication::translate("exportWidget", "Bitrate (kB/s):", nullptr));
        imageQualityLabel->setText(QCoreApplication::translate("exportWidget", "Image quality:", nullptr));
        setImageQualityToAuto->setText(QCoreApplication::translate("exportWidget", "Set to auto", nullptr));
        allowParamsCheckBox->setText(QCoreApplication::translate("exportWidget", "Export with custom parameters", nullptr));
        selectPalettePathButton->setText(QCoreApplication::translate("exportWidget", "Select palette path", nullptr));
        settingsTab->setTabText(settingsTab->indexOf(globalParam), QCoreApplication::translate("exportWidget", "General Parameters", nullptr));
        pixelFormatLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p>Pixel format:</p></body></html>", nullptr));
        movLabel->setText(QCoreApplication::translate("exportWidget", "MOV", nullptr));
        aviCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        aviCombo->setItemText(1, QCoreApplication::translate("exportWidget", "mpeg2", nullptr));
        aviCombo->setItemText(2, QCoreApplication::translate("exportWidget", "mpeg4", nullptr));

        mkvLabel->setText(QCoreApplication::translate("exportWidget", "MKV", nullptr));
        // "yuv420p", "yuva420p", "rgb24", "rgba", "bgr24", "bgra", "gray"
        pixelFormatCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        pixelFormatCombo->setItemText(1, QCoreApplication::translate("exportWidget", "yuv420p", nullptr));
        pixelFormatCombo->setItemText(2, QCoreApplication::translate("exportWidget", "yuva420p", nullptr));
        pixelFormatCombo->setItemText(3, QCoreApplication::translate("exportWidget", "rgb24", nullptr));
        pixelFormatCombo->setItemText(4, QCoreApplication::translate("exportWidget", "rgba", nullptr));
        pixelFormatCombo->setItemText(5, QCoreApplication::translate("exportWidget", "bgr24", nullptr));
        pixelFormatCombo->setItemText(6, QCoreApplication::translate("exportWidget", "bgra", nullptr));
        pixelFormatCombo->setItemText(7, QCoreApplication::translate("exportWidget", "gray", nullptr));

    #if QT_CONFIG(tooltip)
        pixelFormatCombo->setToolTip(QCoreApplication::translate("exportWidget", "Pixel Format availability depends on the selected format, we recommend you stick to yuv420p", nullptr));
    #endif // QT_CONFIG(tooltip)
        movCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        movCombo->setItemText(1, QCoreApplication::translate("exportWidget", "libx264", nullptr));
        movCombo->setItemText(2, QCoreApplication::translate("exportWidget", "h264", nullptr));
        movCombo->setItemText(3, QCoreApplication::translate("exportWidget", "prores_ks", nullptr));
        movCombo->setItemText(4, QCoreApplication::translate("exportWidget", "utvideo", nullptr));

        mp4Label->setText(QCoreApplication::translate("exportWidget", "MP4", nullptr));
        aviLabel->setText(QCoreApplication::translate("exportWidget", "AVI", nullptr));
        webmCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        webmCombo->setItemText(1, QCoreApplication::translate("exportWidget", "vp8", nullptr));
        webmCombo->setItemText(2, QCoreApplication::translate("exportWidget", "vp9", nullptr));

        mp4Combo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        mp4Combo->setItemText(1, QCoreApplication::translate("exportWidget", "mpeg4", nullptr));
        mp4Combo->setItemText(2, QCoreApplication::translate("exportWidget", "h264", nullptr));

        webmLabel->setText(QCoreApplication::translate("exportWidget", "WEBM", nullptr));
        mkvCombo->setItemText(0, QCoreApplication::translate("exportWidget", "Auto", nullptr));
        mkvCombo->setItemText(1, QCoreApplication::translate("exportWidget", "x264", nullptr));
        mkvCombo->setItemText(2, QCoreApplication::translate("exportWidget", "x265", nullptr));
        mkvCombo->setItemText(3, QCoreApplication::translate("exportWidget", "vp8", nullptr));
        mkvCombo->setItemText(4, QCoreApplication::translate("exportWidget", "vp9", nullptr));
        mkvCombo->setItemText(5, QCoreApplication::translate("exportWidget", "av1", nullptr));
        mkvCombo->setItemText(6, QCoreApplication::translate("exportWidget", "ffv1", nullptr));
        mkvCombo->setItemText(7, QCoreApplication::translate("exportWidget", "magicyuv", nullptr));
        mkvCombo->setItemText(8, QCoreApplication::translate("exportWidget", "huffyuv", nullptr));
        mkvCombo->setItemText(9, QCoreApplication::translate("exportWidget", "theora", nullptr));

        settingsTab->setTabText(settingsTab->indexOf(formatParam), QCoreApplication::translate("exportWidget", "Format Parameters", nullptr));
        intermediateLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Intermediate:</p></body></html>", nullptr));
        postLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Post:</p></body></html>", nullptr));
        addPresetToIntermediate->setText(QCoreApplication::translate("exportWidget", "Add to Intermediate pass", nullptr));
        addPresetToPost->setText(QCoreApplication::translate("exportWidget", "Add to Post", nullptr));
        presetLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Presets:</p></body></html>", nullptr));

        removePreset->setText(QCoreApplication::translate("exportWidget", "Remove preset", nullptr));
        savePostParamAsPreset->setText(QCoreApplication::translate("exportWidget", "Save as preset...", nullptr));
        saveIntermediateParamAsPreset->setText(QCoreApplication::translate("exportWidget", "Save as preset...", nullptr));
    #if QT_CONFIG(tooltip)
        commandsLabel->setToolTip(QCoreApplication::translate("exportWidget", "<html><head/><body><p>You may use these special attributes in your custom command:</p><ul><p><li> %exportfilename%</li></p><p><li> %intermediatefilename%</p></li><p><li> %fps%</p></li><p><li> %palettepath%</p></li><p><li> %exportpath%</p></li><p><li> %intermediatepath%</p></li></ul></body></html>", nullptr));
    #endif // QT_CONFIG(tooltip)
        commandsLabel->setText(QCoreApplication::translate("exportWidget", "<html><head/><body><p align=\"center\">Commands</p></body></html>", nullptr));
        settingsTab->setTabText(settingsTab->indexOf(customParam), QCoreApplication::translate("exportWidget", "Custom Parameters", nullptr));
        exportButton->setText(QCoreApplication::translate("exportWidget", "Export", nullptr));
        cancelButton->setText(QCoreApplication::translate("exportWidget", "Cancel", nullptr));
    } // translateUi

    void askForTextUI(QWidget *windowWidget, const QString& questionLbl){
        askOperationCancelled = false;
        windowWidget->resize(400, 200);
        gl = new QGridLayout(windowWidget);
        gl->setObjectName(QString::fromUtf8("gridLayout"));
        scrollArea = new QScrollArea(windowWidget);
        scrollArea->setObjectName(QString::fromUtf8("scrollArea"));
        scrollArea->setWidgetResizable(true);
        scrollWidget = new QWidget();
        scrollWidget->setObjectName(QString::fromUtf8("scrollWidget"));
        scrollWidget->setGeometry(QRect(0, 0, 376, 276));
        gl_2 = new QGridLayout(scrollWidget);
        gl_2->setObjectName(QString::fromUtf8("gridLayout_2"));
        yesNoBox = new QDialogButtonBox(scrollWidget);
        yesNoBox->setObjectName(QString::fromUtf8("buttonBox"));
        yesNoBox->setStandardButtons(QDialogButtonBox::Cancel|QDialogButtonBox::Ok);
        gl_2->addWidget(yesNoBox, 2, 1, 1, 1);
        hS = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
        gl_2->addItem(hS, 0, 0, 1, 1);
        questionLabel = new QLabel(scrollWidget);
        questionLabel->setObjectName(QString::fromUtf8("questionLabel"));
        questionLabel->setAlignment(Qt::AlignCenter);
        questionLabel->setText(questionLbl);
        gl_2->addWidget(questionLabel, 0, 1, 1, 1);
        hS2 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
        gl_2->addItem(hS2, 0, 2, 1, 1);
        textEdit = new QPlainTextEdit(scrollWidget);
        textEdit->setObjectName(QString::fromUtf8("textEdit"));
        gl_2->addWidget(textEdit, 1, 0, 1, 3);
        scrollArea->setWidget(scrollWidget);
        gl->addWidget(scrollArea, 0, 0, 1, 1);
        QMetaObject::connectSlotsByName(windowWidget);

        QWidget::connect(yesNoBox, &QDialogButtonBox::accepted, [=]() mutable{
            if (!textEdit->toPlainText().isEmpty()) {
                askOperationCancelled = false; windowWidget->close();
            }
        });
        QWidget::connect(yesNoBox, &QDialogButtonBox::rejected, [=]() mutable{
            askOperationCancelled = true; windowWidget->close();
        });
    }
};

namespace Ui {
class exportWidget: public ExportWidgetUI {};
} // namespace Ui

QT_END_NAMESPACE

#endif // EXPORTDIAG_H
